#include <stdio.h>
static unsigned char xtime(unsigned char x)
{
	return ((x << 1) ^ ((x & 0x80) ? 0x1b : 0x00));
}

static unsigned char multiply(unsigned char x, unsigned char y)
{
	return ((y & 1) ? x : 0) ^
		((y >> 1 & 1) ? xtime(x) : 0) ^
		((y >> 2 & 1) ? xtime(xtime(x)) : 0) ^
		((y >> 3 & 1) ? xtime(xtime(xtime(x))) : 0) ^
		((y >> 4 & 1) ? xtime(xtime(xtime(xtime(x)))) : 0);
}

static const unsigned char S_box[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
};

static const unsigned char Contrary_S_box[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
	0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
	0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
	0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
	0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
	0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
	0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
	0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
	0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
	0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
	0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
	0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
	0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
	0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
	0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
	0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
	0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
};
static const unsigned char Rcon[10] = {
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
};
void KeyExpansionCore(unsigned char* in, unsigned char i)
{
	unsigned int* q = (unsigned int*)in;
	*q = (*q >> 8) | ((*q & 0xff) << 24);

	in[0] = S_box[in[0]];
	in[1] = S_box[in[1]];
	in[2] = S_box[in[2]];
	in[3] = S_box[in[3]];

	in[0] ^= Rcon[i];
}

void KeyExpansion(const unsigned char* inputKey, unsigned char* expandedKeys)
{
	for (int i = 0; i < 16; i++)
	{
		expandedKeys[i] = inputKey[i];
	}

	int bytesGenerated = 16;
	int rconIteration = 1;
	unsigned char temp[4];

	while (bytesGenerated < 176)
	{
		for (int i = 0; i < 4; i++)
		{
			temp[i] = expandedKeys[i + bytesGenerated - 4];
		}

		if (bytesGenerated % 16 == 0)
		{
			KeyExpansionCore(temp, rconIteration);
			rconIteration++;
		}

		for (unsigned char a = 0; a < 4; a++)
		{
			expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ temp[a];
			bytesGenerated++;
		}
	}
}

void SubBytes(unsigned char* state)
{
	for (int i = 0; i < 16; i++)
	{
		state[i] = S_box[state[i]];
	}
}

void InvSubBytes(unsigned char* state)
{
	for (int i = 0; i < 16; i++)
	{
		state[i] = Contrary_S_box[state[i]];
	}
}

void ShiftRows(unsigned char* state)
{
	unsigned char tmp[16];

	tmp[0] = state[0];
	tmp[1] = state[5];
	tmp[2] = state[10];
	tmp[3] = state[15];

	tmp[4] = state[4];
	tmp[5] = state[9];
	tmp[6] = state[14];
	tmp[7] = state[3];

	tmp[8] = state[8];
	tmp[9] = state[13];
	tmp[10] = state[2];
	tmp[11] = state[7];

	tmp[12] = state[12];
	tmp[13] = state[1];
	tmp[14] = state[6];
	tmp[15] = state[11];

	for (int i = 0; i < 16; i++)
	{
		state[i] = tmp[i];
	}
}

void InvShiftRows(unsigned char* state)
{
	unsigned char tmp[16];

	tmp[0] = state[0];
	tmp[1] = state[13];
	tmp[2] = state[10];
	tmp[3] = state[7];

	tmp[4] = state[4];
	tmp[5] = state[1];
	tmp[6] = state[14];
	tmp[7] = state[11];

	tmp[8] = state[8];
	tmp[9] = state[5];
	tmp[10] = state[2];
	tmp[11] = state[15];

	tmp[12] = state[12];
	tmp[13] = state[9];
	tmp[14] = state[6];
	tmp[15] = state[3];

	for (int i = 0; i < 16; i++)
	{
		state[i] = tmp[i];
	}
}

void MixColumns(unsigned char* state)
{
	unsigned char tmp[16];

	tmp[0] = (unsigned char)(multiply(0x02, state[0]) ^ multiply(0x03, state[1]) ^ state[2] ^ state[3]);
	tmp[1] = (unsigned char)(state[0] ^ multiply(0x02, state[1]) ^ multiply(0x03, state[2]) ^ state[3]);
	tmp[2] = (unsigned char)(state[0] ^ state[1] ^ multiply(0x02, state[2]) ^ multiply(0x03, state[3]));
	tmp[3] = (unsigned char)(multiply(0x03, state[0]) ^ state[1] ^ state[2] ^ multiply(0x02, state[3]));

	tmp[4] = (unsigned char)(multiply(0x02, state[4]) ^ multiply(0x03, state[5]) ^ state[6] ^ state[7]);
	tmp[5] = (unsigned char)(state[4] ^ multiply(0x02, state[5]) ^ multiply(0x03, state[6]) ^ state[7]);
	tmp[6] = (unsigned char)(state[4] ^ state[5] ^ multiply(0x02, state[6]) ^ multiply(0x03, state[7]));
	tmp[7] = (unsigned char)(multiply(0x03, state[4]) ^ state[5] ^ state[6] ^ multiply(0x02, state[7]));

	tmp[8] = (unsigned char)(multiply(0x02, state[8]) ^ multiply(0x03, state[9]) ^ state[10] ^ state[11]);
	tmp[9] = (unsigned char)(state[8] ^ multiply(0x02, state[9]) ^ multiply(0x03, state[10]) ^ state[11]);
	tmp[10] = (unsigned char)(state[8] ^ state[9] ^ multiply(0x02, state[10]) ^ multiply(0x03, state[11]));
	tmp[11] = (unsigned char)(multiply(0x03, state[8]) ^ state[9] ^ state[10] ^ multiply(0x02, state[11]));

	tmp[12] = (unsigned char)(multiply(0x02, state[12]) ^ multiply(0x03, state[13]) ^ state[14] ^ state[15]);
	tmp[13] = (unsigned char)(state[12] ^ multiply(0x02, state[13]) ^ multiply(0x03, state[14]) ^ state[15]);
	tmp[14] = (unsigned char)(state[12] ^ state[13] ^ multiply(0x02, state[14]) ^ multiply(0x03, state[15]));
	tmp[15] = (unsigned char)(multiply(0x03, state[12]) ^ state[13] ^ state[14] ^ multiply(0x02, state[15]));

	for (int i = 0; i < 16; i++)
	{
		state[i] = tmp[i];
	}
}

void InvMixColumns(unsigned char* state)
{
	unsigned char tmp[16];

	tmp[0] = (unsigned char)(multiply(0x0e, state[0]) ^ multiply(0x0b, state[1]) ^ multiply(0x0d, state[2]) ^ multiply(0x09, state[3]));
	tmp[1] = (unsigned char)(multiply(0x09, state[0]) ^ multiply(0x0e, state[1]) ^ multiply(0x0b, state[2]) ^ multiply(0x0d, state[3]));
	tmp[2] = (unsigned char)(multiply(0x0d, state[0]) ^ multiply(0x09, state[1]) ^ multiply(0x0e, state[2]) ^ multiply(0x0b, state[3]));
	tmp[3] = (unsigned char)(multiply(0x0b, state[0]) ^ multiply(0x0d, state[1]) ^ multiply(0x09, state[2]) ^ multiply(0x0e, state[3]));

	tmp[4] = (unsigned char)(multiply(0x0e, state[4]) ^ multiply(0x0b, state[5]) ^ multiply(0x0d, state[6]) ^ multiply(0x09, state[7]));
	tmp[5] = (unsigned char)(multiply(0x09, state[4]) ^ multiply(0x0e, state[5]) ^ multiply(0x0b, state[6]) ^ multiply(0x0d, state[7]));
	tmp[6] = (unsigned char)(multiply(0x0d, state[4]) ^ multiply(0x09, state[5]) ^ multiply(0x0e, state[6]) ^ multiply(0x0b, state[7]));
	tmp[7] = (unsigned char)(multiply(0x0b, state[4]) ^ multiply(0x0d, state[5]) ^ multiply(0x09, state[6]) ^ multiply(0x0e, state[7]));

	tmp[8] = (unsigned char)(multiply(0x0e, state[8]) ^ multiply(0x0b, state[9]) ^ multiply(0x0d, state[10]) ^ multiply(0x09, state[11]));
	tmp[9] = (unsigned char)(multiply(0x09, state[8]) ^ multiply(0x0e, state[9]) ^ multiply(0x0b, state[10]) ^ multiply(0x0d, state[11]));
	tmp[10] = (unsigned char)(multiply(0x0d, state[8]) ^ multiply(0x09, state[9]) ^ multiply(0x0e, state[10]) ^ multiply(0x0b, state[11]));
	tmp[11] = (unsigned char)(multiply(0x0b, state[8]) ^ multiply(0x0d, state[9]) ^ multiply(0x09, state[10]) ^ multiply(0x0e, state[11]));

	tmp[12] = (unsigned char)(multiply(0x0e, state[12]) ^ multiply(0x0b, state[13]) ^ multiply(0x0d, state[14]) ^ multiply(0x09, state[15]));
	tmp[13] = (unsigned char)(multiply(0x09, state[12]) ^ multiply(0x0e, state[13]) ^ multiply(0x0b, state[14]) ^ multiply(0x0d, state[15]));
	tmp[14] = (unsigned char)(multiply(0x0d, state[12]) ^ multiply(0x09, state[13]) ^ multiply(0x0e, state[14]) ^ multiply(0x0b, state[15]));
	tmp[15] = (unsigned char)(multiply(0x0b, state[12]) ^ multiply(0x0d, state[13]) ^ multiply(0x09, state[14]) ^ multiply(0x0e, state[15]));

	for (int i = 0; i < 16; i++)
	{
		state[i] = tmp[i];
	}
}

void AddRoundKey(unsigned char* state, const unsigned char* roundKey)
{
	for (int i = 0; i < 16; i++)
	{
		state[i] ^= roundKey[i];
	}
}

void AES_Encrypt(const unsigned char* message, const unsigned char* key, unsigned char* encryptedMessage)
{
	unsigned char state[16];
	for (int i = 0; i < 16; i++)
	{
		state[i] = message[i];
	}

	unsigned char expandedKeys[176];
	KeyExpansion(key, expandedKeys);

	AddRoundKey(state, key);

	for (int round = 1; round <= 9; round++)
	{
		SubBytes(state);
		ShiftRows(state);
		MixColumns(state);
		AddRoundKey(state, expandedKeys + (round * 16));
	}

	SubBytes(state);
	ShiftRows(state);
	AddRoundKey(state, expandedKeys + 160);

	for (int i = 0; i < 16; i++)
	{
		encryptedMessage[i] = state[i];
	}
}

void AES_Decrypt(const unsigned char* encryptedMessage, const unsigned char* key, unsigned char* decryptedMessage)
{
	unsigned char state[16];
	for (int i = 0; i < 16; i++)
	{
		state[i] = encryptedMessage[i];
	}

	unsigned char expandedKeys[176];
	KeyExpansion(key, expandedKeys);

	AddRoundKey(state, expandedKeys + 160);

	for (int round = 9; round >= 1; round--)
	{
		InvShiftRows(state);
		InvSubBytes(state);
		AddRoundKey(state, expandedKeys + (round * 16));
		InvMixColumns(state);
	}

	InvShiftRows(state);
	InvSubBytes(state);
	AddRoundKey(state, key);

	for (int i = 0; i < 16; i++)
	{
		decryptedMessage[i] = state[i];
	}
}

int main()
{
	unsigned char message[] = "Hello, AES!";
	unsigned char key[] = "ThisIsASecretKey";

	unsigned char encryptedMessage[16];
	unsigned char decryptedMessage[16];

	AES_Encrypt(message, key, encryptedMessage);
	AES_Decrypt(encryptedMessage, key, decryptedMessage);

	printf("Original Message: %s\n", message);
	printf("Encrypted Message: ");
	for (int i = 0; i < 16; i++)
	{
		printf("%02x ", encryptedMessage[i]);
	}
	printf("\n");

	printf("Decrypted Message: %s\n", decryptedMessage);

	return 0;
}

